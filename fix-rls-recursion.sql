-- Corre√ß√£o para recurs√£o infinita nas pol√≠ticas RLS
-- Execute este script no SQL Editor do Supabase

-- 1. Remover todas as pol√≠ticas existentes que causam recurs√£o
DO $$
BEGIN
    -- Remover pol√≠ticas da tabela users
    DROP POLICY IF EXISTS "users_select_policy" ON users;
    DROP POLICY IF EXISTS "users_insert_policy" ON users;
    DROP POLICY IF EXISTS "users_update_policy" ON users;
    DROP POLICY IF EXISTS "users_delete_policy" ON users;
    DROP POLICY IF EXISTS "Admins can view all users" ON users;
    DROP POLICY IF EXISTS "Users can view own profile" ON users;
    DROP POLICY IF EXISTS "Users can update own profile" ON users;
    DROP POLICY IF EXISTS "Enable insert for authenticated users only" ON users;
    
    -- Remover pol√≠ticas da tabela clientes
    DROP POLICY IF EXISTS "Users can view own clientes" ON clientes;
    DROP POLICY IF EXISTS "Users can insert own clientes" ON clientes;
    DROP POLICY IF EXISTS "Users can update own clientes" ON clientes;
    DROP POLICY IF EXISTS "Users can delete own clientes" ON clientes;
    
    RAISE NOTICE 'Pol√≠ticas existentes removidas com sucesso';
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE 'Erro ao remover pol√≠ticas: %', SQLERRM;
END $$;

-- 2. Garantir que RLS est√° habilitado
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE clientes ENABLE ROW LEVEL SECURITY;

-- 3. Criar pol√≠ticas simples SEM recurs√£o para a tabela users
-- Pol√≠tica b√°sica: usu√°rios veem apenas seu pr√≥prio perfil
CREATE POLICY "users_select_own" ON users
  FOR SELECT
  TO authenticated
  USING (auth.uid() = id);

-- Pol√≠tica para inser√ß√£o: usu√°rios podem criar seu pr√≥prio perfil
CREATE POLICY "users_insert_own" ON users
  FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = id);

-- Pol√≠tica para atualiza√ß√£o: usu√°rios podem atualizar seu pr√≥prio perfil
CREATE POLICY "users_update_own" ON users
  FOR UPDATE
  TO authenticated
  USING (auth.uid() = id)
  WITH CHECK (auth.uid() = id);

-- 4. Criar pol√≠ticas simples para a tabela clientes
-- Pol√≠tica para visualiza√ß√£o: usu√°rios veem apenas seus pr√≥prios clientes
CREATE POLICY "clientes_select_own" ON clientes
  FOR SELECT
  TO authenticated
  USING (auth.uid() = user_id);

-- Pol√≠tica para inser√ß√£o: usu√°rios podem criar clientes para si mesmos
CREATE POLICY "clientes_insert_own" ON clientes
  FOR INSERT
  TO authenticated
  WITH CHECK (auth.uid() = user_id);

-- Pol√≠tica para atualiza√ß√£o: usu√°rios podem atualizar seus pr√≥prios clientes
CREATE POLICY "clientes_update_own" ON clientes
  FOR UPDATE
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

-- Pol√≠tica para exclus√£o: usu√°rios podem deletar seus pr√≥prios clientes
CREATE POLICY "clientes_delete_own" ON clientes
  FOR DELETE
  TO authenticated
  USING (auth.uid() = user_id);

-- 5. Criar fun√ß√£o para verificar se usu√°rio √© admin (sem recurs√£o)
-- Esta fun√ß√£o usa auth.users diretamente, n√£o a tabela users
CREATE OR REPLACE FUNCTION public.is_admin_simple()
RETURNS BOOLEAN
LANGUAGE SQL
SECURITY DEFINER
SET search_path = public
AS $$
  SELECT COALESCE(
    (auth.jwt() ->> 'user_metadata')::jsonb ->> 'role' = 'admin',
    false
  );
$$;

-- 6. Pol√≠ticas especiais para admins (usando a fun√ß√£o sem recurs√£o)
-- Admin pode ver todos os usu√°rios
CREATE POLICY "admin_view_all_users" ON users
  FOR SELECT
  TO authenticated
  USING (public.is_admin_simple());

-- Admin pode atualizar todos os usu√°rios
CREATE POLICY "admin_update_all_users" ON users
  FOR UPDATE
  TO authenticated
  USING (public.is_admin_simple())
  WITH CHECK (public.is_admin_simple());

-- Admin pode ver todos os clientes
CREATE POLICY "admin_view_all_clientes" ON clientes
  FOR SELECT
  TO authenticated
  USING (public.is_admin_simple());

-- Admin pode atualizar todos os clientes
CREATE POLICY "admin_update_all_clientes" ON clientes
  FOR UPDATE
  TO authenticated
  USING (public.is_admin_simple())
  WITH CHECK (public.is_admin_simple());

-- Admin pode deletar todos os clientes
CREATE POLICY "admin_delete_all_clientes" ON clientes
  FOR DELETE
  TO authenticated
  USING (public.is_admin_simple());

-- 7. Verificar se as pol√≠ticas foram criadas corretamente
SELECT 
  schemaname,
  tablename,
  policyname,
  permissive,
  roles,
  cmd,
  qual,
  with_check
FROM pg_policies 
WHERE tablename IN ('users', 'clientes')
ORDER BY tablename, policyname;

-- 8. Teste de verifica√ß√£o
DO $$
BEGIN
    RAISE NOTICE '‚úÖ Pol√≠ticas RLS criadas com sucesso!';
    RAISE NOTICE 'üîí Usu√°rios normais: veem apenas seus pr√≥prios dados';
    RAISE NOTICE 'üëë Admins: veem todos os dados (via user_metadata)';
    RAISE NOTICE 'üö´ Sem recurs√£o: pol√≠ticas usam auth.uid() diretamente';
END $$;
